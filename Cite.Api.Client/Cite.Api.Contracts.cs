//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Cite.Api.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICiteApiClient
    {
        /// <summary>
        /// Gets Actions for the specified evaluation team
        /// <br/>for the current move
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Action>> GetActionsByEvaluationTeamAsync(System.Guid evaluationId, System.Guid teamId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Actions for the specified evaluation team
        /// <br/>for the current move
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Action>> GetActionsByEvaluationTeamAsync(System.Guid evaluationId, System.Guid teamId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Actions for the specified evaluation and move
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Action>> GetActionsByEvaluationMoveAsync(System.Guid evaluationId, int moveNumber);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Actions for the specified evaluation and move
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Action>> GetActionsByEvaluationMoveAsync(System.Guid evaluationId, int moveNumber, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Actions for the specified evaluation, move and team
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Action>> GetActionsByEvaluationMoveTeamAsync(System.Guid evaluationId, int moveNumber, System.Guid teamId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Actions for the specified evaluation, move and team
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Action>> GetActionsByEvaluationMoveTeamAsync(System.Guid evaluationId, int moveNumber, System.Guid teamId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Action by id
        /// </summary>
        /// <param name="id">The id of the Action</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Action> GetActionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Action by id
        /// </summary>
        /// <param name="id">The id of the Action</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Action> GetActionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates an Action
        /// </summary>
        /// <param name="id">The Id of the Action to update</param>
        /// <param name="body">The updated Action values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Action> UpdateActionAsync(System.Guid id, Action body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates an Action
        /// </summary>
        /// <param name="id">The Id of the Action to update</param>
        /// <param name="body">The updated Action values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Action> UpdateActionAsync(System.Guid id, Action body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes an Action
        /// </summary>
        /// <param name="id">The id of the Action to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteActionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an Action
        /// </summary>
        /// <param name="id">The id of the Action to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteActionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Action
        /// </summary>
        /// <param name="body">The data to create the Action with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Action> CreateActionAsync(Action body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Action
        /// </summary>
        /// <param name="body">The data to create the Action with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Action> CreateActionAsync(Action body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Checks an Action
        /// </summary>
        /// <param name="id">The Id of the Action to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Action> CheckActionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Checks an Action
        /// </summary>
        /// <param name="id">The Id of the Action to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Action> CheckActionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Unchecks an Action
        /// </summary>
        /// <param name="id">The Id of the Action to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Action> UncheckActionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unchecks an Action
        /// </summary>
        /// <param name="id">The Id of the Action to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Action> UncheckActionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Evaluations
        /// </summary>
        /// <param name="userId">Whether or not to return records only for a designated user</param>
        /// <param name="scoringModelId">Whether or not to return records only for a designated team</param>
        /// <param name="description">Whether or not to return records only for descriptions containing the designated string</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Evaluation>> GetEvaluationsAsync(string userId, string scoringModelId, string description);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Evaluations
        /// </summary>
        /// <param name="userId">Whether or not to return records only for a designated user</param>
        /// <param name="scoringModelId">Whether or not to return records only for a designated team</param>
        /// <param name="description">Whether or not to return records only for descriptions containing the designated string</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Evaluation>> GetEvaluationsAsync(string userId, string scoringModelId, string description, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Evaluation
        /// </summary>
        /// <param name="body">The data used to create the Evaluation</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Evaluation> CreateEvaluationAsync(Evaluation body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Evaluation
        /// </summary>
        /// <param name="body">The data used to create the Evaluation</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Evaluation> CreateEvaluationAsync(Evaluation body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Evaluations for the current user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Evaluation>> GetMyEvaluationsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Evaluations for the current user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Evaluation>> GetMyEvaluationsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Evaluation by id
        /// </summary>
        /// <param name="id">The id of the Evaluation</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Evaluation> GetEvaluationAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Evaluation by id
        /// </summary>
        /// <param name="id">The id of the Evaluation</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Evaluation> GetEvaluationAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates an Evaluation
        /// </summary>
        /// <param name="id">The Id of the Evaluation to update</param>
        /// <param name="body">The updated Evaluation values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Evaluation> UpdateEvaluationAsync(System.Guid id, Evaluation body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates an Evaluation
        /// </summary>
        /// <param name="id">The Id of the Evaluation to update</param>
        /// <param name="body">The updated Evaluation values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Evaluation> UpdateEvaluationAsync(System.Guid id, Evaluation body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes an Evaluation
        /// </summary>
        /// <param name="id">The id of the Evaluation to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteEvaluationAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an Evaluation
        /// </summary>
        /// <param name="id">The id of the Evaluation to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteEvaluationAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates an Evaluation situation details
        /// </summary>
        /// <param name="id">The Id of the Evaluation to update</param>
        /// <param name="body">The updated Evaluation values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Evaluation> UpdateEvaluationSituationAsync(System.Guid id, EvaluationSituation body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates an Evaluation situation details
        /// </summary>
        /// <param name="id">The Id of the Evaluation to update</param>
        /// <param name="body">The updated Evaluation values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Evaluation> UpdateEvaluationSituationAsync(System.Guid id, EvaluationSituation body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Sets an Evaluation Current Move Number
        /// </summary>
        /// <param name="id">The Id of the Evaluation to update</param>
        /// <param name="move">The move value</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Evaluation> SetEvaluationCurrentMoveAsync(System.Guid id, int move);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets an Evaluation Current Move Number
        /// </summary>
        /// <param name="id">The Id of the Evaluation to update</param>
        /// <param name="move">The move value</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Evaluation> SetEvaluationCurrentMoveAsync(System.Guid id, int move, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all EvaluationTeams in the system
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EvaluationTeam>> GetEvaluationTeamsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all EvaluationTeams in the system
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EvaluationTeam>> GetEvaluationTeamsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new EvaluationTeam
        /// </summary>
        /// <param name="body">The data to create the EvaluationTeam with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EvaluationTeam> CreateEvaluationTeamAsync(EvaluationTeam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new EvaluationTeam
        /// </summary>
        /// <param name="body">The data to create the EvaluationTeam with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EvaluationTeam> CreateEvaluationTeamAsync(EvaluationTeam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific EvaluationTeam by id
        /// </summary>
        /// <param name="id">The id of the EvaluationTeam</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EvaluationTeam> GetEvaluationTeamAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific EvaluationTeam by id
        /// </summary>
        /// <param name="id">The id of the EvaluationTeam</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EvaluationTeam> GetEvaluationTeamAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a EvaluationTeam
        /// </summary>
        /// <param name="id">The id of the EvaluationTeam to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteEvaluationTeamAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a EvaluationTeam
        /// </summary>
        /// <param name="id">The id of the EvaluationTeam to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteEvaluationTeamAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a EvaluationTeam by team ID and evaluation ID
        /// </summary>
        /// <param name="evaluationId">ID of a evaluation.</param>
        /// <param name="teamId">ID of a team.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteEvaluationTeamByIdsAsync(System.Guid evaluationId, System.Guid teamId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a EvaluationTeam by team ID and evaluation ID
        /// </summary>
        /// <param name="evaluationId">ID of a evaluation.</param>
        /// <param name="teamId">ID of a team.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteEvaluationTeamByIdsAsync(System.Guid evaluationId, System.Guid teamId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets the evaluation's unread article count for the requesting user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UnreadArticles> GetEvaluationUnreadArticleCountAsync(System.Guid evaluationId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the evaluation's unread article count for the requesting user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UnreadArticles> GetEvaluationUnreadArticleCountAsync(System.Guid evaluationId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all Group in the system
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Group>> GetGroupsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all Group in the system
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Group>> GetGroupsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Group
        /// </summary>
        /// <param name="body">The data to create the Group with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Group> CreateGroupAsync(Group body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Group
        /// </summary>
        /// <param name="body">The data to create the Group with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Group> CreateGroupAsync(Group body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Groups for the current user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Group>> GetMyGroupsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Groups for the current user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Group>> GetMyGroupsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Group by id
        /// </summary>
        /// <param name="id">The id of the Group</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Group> GetGroupAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Group by id
        /// </summary>
        /// <param name="id">The id of the Group</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Group> GetGroupAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a Group
        /// </summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Group values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Group> UpdateGroupAsync(System.Guid id, Group body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a Group
        /// </summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Group values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Group> UpdateGroupAsync(System.Guid id, Group body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a Group
        /// </summary>
        /// <param name="id">The id of the Group to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteGroupAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a Group
        /// </summary>
        /// <param name="id">The id of the Group to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteGroupAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all GroupTeams in the system
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupTeam>> GetGroupTeamsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all GroupTeams in the system
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupTeam>> GetGroupTeamsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new GroupTeam
        /// </summary>
        /// <param name="body">The data to create the GroupTeam with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GroupTeam> CreateGroupTeamAsync(GroupTeam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new GroupTeam
        /// </summary>
        /// <param name="body">The data to create the GroupTeam with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GroupTeam> CreateGroupTeamAsync(GroupTeam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific GroupTeam by id
        /// </summary>
        /// <param name="id">The id of the GroupTeam</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GroupTeam> GetGroupTeamAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific GroupTeam by id
        /// </summary>
        /// <param name="id">The id of the GroupTeam</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GroupTeam> GetGroupTeamAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a GroupTeam
        /// </summary>
        /// <param name="id">The id of the GroupTeam to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteGroupTeamAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a GroupTeam
        /// </summary>
        /// <param name="id">The id of the GroupTeam to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteGroupTeamAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a GroupTeam by group ID and team ID
        /// </summary>
        /// <param name="teamId">ID of a team.</param>
        /// <param name="groupId">ID of a group.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteGroupTeamByIdsAsync(System.Guid teamId, System.Guid groupId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a GroupTeam by group ID and team ID
        /// </summary>
        /// <param name="teamId">ID of a team.</param>
        /// <param name="groupId">ID of a group.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteGroupTeamByIdsAsync(System.Guid teamId, System.Guid groupId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Responds when this api is functional
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> HealthCheckAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Responds when this api is functional
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> HealthCheckAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Moves by evaluation
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Move>> GetByEvaluationAsync(System.Guid evaluationId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Moves by evaluation
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Move>> GetByEvaluationAsync(System.Guid evaluationId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Move by id
        /// </summary>
        /// <param name="id">The id of the Move</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Move> GetMoveAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Move by id
        /// </summary>
        /// <param name="id">The id of the Move</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Move> GetMoveAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  Move
        /// </summary>
        /// <param name="id">The Id of the Move to update</param>
        /// <param name="body">The updated Move values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Move> UpdateMoveAsync(System.Guid id, Move body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  Move
        /// </summary>
        /// <param name="id">The Id of the Move to update</param>
        /// <param name="body">The updated Move values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Move> UpdateMoveAsync(System.Guid id, Move body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  Move
        /// </summary>
        /// <param name="id">The id of the Move to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteMoveAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  Move
        /// </summary>
        /// <param name="id">The id of the Move to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteMoveAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Move
        /// </summary>
        /// <param name="body">The data used to create the Move</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Move> CreateMoveAsync(Move body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Move
        /// </summary>
        /// <param name="body">The data used to create the Move</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Move> CreateMoveAsync(Move body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all Permission in the system
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetPermissionsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all Permission in the system
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetPermissionsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Permission
        /// </summary>
        /// <param name="body">The data to create the Permission with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> CreatePermissionAsync(Permission body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Permission
        /// </summary>
        /// <param name="body">The data to create the Permission with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> CreatePermissionAsync(Permission body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Permissions for the current user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetMyPermissionsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Permissions for the current user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetMyPermissionsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Permissions for the specified user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetPermissionsByUserAsync(System.Guid userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Permissions for the specified user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetPermissionsByUserAsync(System.Guid userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Permission by id
        /// </summary>
        /// <param name="id">The id of the Permission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> GetPermissionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Permission by id
        /// </summary>
        /// <param name="id">The id of the Permission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> GetPermissionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a Permission
        /// </summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Permission values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> UpdatePermissionAsync(System.Guid id, Permission body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a Permission
        /// </summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Permission values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> UpdatePermissionAsync(System.Guid id, Permission body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a Permission
        /// </summary>
        /// <param name="id">The id of the Permission to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePermissionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a Permission
        /// </summary>
        /// <param name="id">The id of the Permission to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePermissionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Roles for the specified evaluation
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Role>> GetRolesByEvaluationAsync(System.Guid evaluationId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Roles for the specified evaluation
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Role>> GetRolesByEvaluationAsync(System.Guid evaluationId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Roles for the specified evaluation team
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Role>> GetRolesByEvaluationTeamAsync(System.Guid evaluationId, System.Guid teamId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Roles for the specified evaluation team
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Role>> GetRolesByEvaluationTeamAsync(System.Guid evaluationId, System.Guid teamId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Role by id
        /// </summary>
        /// <param name="id">The id of the Role</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> GetRoleAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Role by id
        /// </summary>
        /// <param name="id">The id of the Role</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> GetRoleAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a Role
        /// </summary>
        /// <param name="id">The Id of the Role to update</param>
        /// <param name="body">The updated Role values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> UpdateRoleAsync(System.Guid id, Role body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a Role
        /// </summary>
        /// <param name="id">The Id of the Role to update</param>
        /// <param name="body">The updated Role values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> UpdateRoleAsync(System.Guid id, Role body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a Role
        /// </summary>
        /// <param name="id">The id of the Role to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRoleAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a Role
        /// </summary>
        /// <param name="id">The id of the Role to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRoleAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Role
        /// </summary>
        /// <param name="body">The data to create the Role with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> CreateRoleAsync(Role body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Role
        /// </summary>
        /// <param name="body">The data to create the Role with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> CreateRoleAsync(Role body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Adds a User to a Role
        /// </summary>
        /// <param name="roleId">The Id of the Role to update</param>
        /// <param name="userId">The updated Role values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> AddUserToRoleAsync(System.Guid roleId, System.Guid userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds a User to a Role
        /// </summary>
        /// <param name="roleId">The Id of the Role to update</param>
        /// <param name="userId">The updated Role values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> AddUserToRoleAsync(System.Guid roleId, System.Guid userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Removes a User to a Role
        /// </summary>
        /// <param name="roleId">The Id of the Role to update</param>
        /// <param name="userId">The updated Role values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> RemoveUserFromRoleAsync(System.Guid roleId, System.Guid userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes a User to a Role
        /// </summary>
        /// <param name="roleId">The Id of the Role to update</param>
        /// <param name="userId">The updated Role values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> RemoveUserFromRoleAsync(System.Guid roleId, System.Guid userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets ScoringCategories
        /// </summary>
        /// <param name="description">Whether or not to return records only for descriptions containing the designated string</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScoringCategory>> GetScoringCategoriesAsync(string description);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets ScoringCategories
        /// </summary>
        /// <param name="description">Whether or not to return records only for descriptions containing the designated string</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScoringCategory>> GetScoringCategoriesAsync(string description, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new ScoringCategory
        /// </summary>
        /// <param name="body">The data used to create the ScoringCategory</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringCategory> CreateScoringCategoryAsync(ScoringCategory body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new ScoringCategory
        /// </summary>
        /// <param name="body">The data used to create the ScoringCategory</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringCategory> CreateScoringCategoryAsync(ScoringCategory body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets ScoringCategories for the designated ScoringModel
        /// </summary>
        /// <param name="scoringModelId">The ID of the ScoringModel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScoringCategory>> GetScoringCategoriesByScoringModelIdAsync(System.Guid scoringModelId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets ScoringCategories for the designated ScoringModel
        /// </summary>
        /// <param name="scoringModelId">The ID of the ScoringModel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScoringCategory>> GetScoringCategoriesByScoringModelIdAsync(System.Guid scoringModelId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific ScoringCategory by id
        /// </summary>
        /// <param name="id">The id of the ScoringCategory</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringCategory> GetScoringCategoryAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific ScoringCategory by id
        /// </summary>
        /// <param name="id">The id of the ScoringCategory</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringCategory> GetScoringCategoryAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  ScoringCategory
        /// </summary>
        /// <param name="id">The Id of the ScoringCategory to update</param>
        /// <param name="body">The updated ScoringCategory values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringCategory> UpdateScoringCategoryAsync(System.Guid id, ScoringCategory body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  ScoringCategory
        /// </summary>
        /// <param name="id">The Id of the ScoringCategory to update</param>
        /// <param name="body">The updated ScoringCategory values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringCategory> UpdateScoringCategoryAsync(System.Guid id, ScoringCategory body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  ScoringCategory
        /// </summary>
        /// <param name="id">The id of the ScoringCategory to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScoringCategoryAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  ScoringCategory
        /// </summary>
        /// <param name="id">The id of the ScoringCategory to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScoringCategoryAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets ScoringModels
        /// </summary>
        /// <param name="userId">Whether or not to return records only for a designated user</param>
        /// <param name="description">Whether or not to return records only for descriptions containing the designated string</param>
        /// <param name="includeArchived">Whether or not to return archived records</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScoringModel>> GetScoringModelsAsync(string userId, string description, bool? includeArchived);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets ScoringModels
        /// </summary>
        /// <param name="userId">Whether or not to return records only for a designated user</param>
        /// <param name="description">Whether or not to return records only for descriptions containing the designated string</param>
        /// <param name="includeArchived">Whether or not to return archived records</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScoringModel>> GetScoringModelsAsync(string userId, string description, bool? includeArchived, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new ScoringModel
        /// </summary>
        /// <param name="body">The data used to create the ScoringModel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringModel> CreateScoringModelAsync(ScoringModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new ScoringModel
        /// </summary>
        /// <param name="body">The data used to create the ScoringModel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringModel> CreateScoringModelAsync(ScoringModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific ScoringModel by id
        /// </summary>
        /// <param name="id">The id of the ScoringModel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringModel> GetScoringModelAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific ScoringModel by id
        /// </summary>
        /// <param name="id">The id of the ScoringModel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringModel> GetScoringModelAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  ScoringModel
        /// </summary>
        /// <param name="id">The Id of the ScoringModel to update</param>
        /// <param name="body">The updated ScoringModel values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringModel> UpdateScoringModelAsync(System.Guid id, ScoringModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  ScoringModel
        /// </summary>
        /// <param name="id">The Id of the ScoringModel to update</param>
        /// <param name="body">The updated ScoringModel values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringModel> UpdateScoringModelAsync(System.Guid id, ScoringModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  ScoringModel
        /// </summary>
        /// <param name="id">The id of the ScoringModel to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScoringModelAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  ScoringModel
        /// </summary>
        /// <param name="id">The id of the ScoringModel to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScoringModelAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets ScoringOptions
        /// </summary>
        /// <param name="description">Whether or not to return records only for descriptions containing the designated string</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScoringOption>> GetScoringOptionsAsync(string description);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets ScoringOptions
        /// </summary>
        /// <param name="description">Whether or not to return records only for descriptions containing the designated string</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScoringOption>> GetScoringOptionsAsync(string description, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new ScoringOption
        /// </summary>
        /// <param name="body">The data used to create the ScoringOption</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringOption> CreateScoringOptionAsync(ScoringOption body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new ScoringOption
        /// </summary>
        /// <param name="body">The data used to create the ScoringOption</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringOption> CreateScoringOptionAsync(ScoringOption body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets ScoringOptions for the designated ScoringCategory
        /// </summary>
        /// <param name="scoringCategoryId">The ID of the ScoringCategory</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScoringOption>> GetScoringOptionsByScoringCategoryIdAsync(System.Guid scoringCategoryId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets ScoringOptions for the designated ScoringCategory
        /// </summary>
        /// <param name="scoringCategoryId">The ID of the ScoringCategory</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScoringOption>> GetScoringOptionsByScoringCategoryIdAsync(System.Guid scoringCategoryId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific ScoringOption by id
        /// </summary>
        /// <param name="id">The id of the ScoringOption</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringOption> GetScoringOptionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific ScoringOption by id
        /// </summary>
        /// <param name="id">The id of the ScoringOption</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringOption> GetScoringOptionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  ScoringOption
        /// </summary>
        /// <param name="id">The Id of the ScoringOption to update</param>
        /// <param name="body">The updated ScoringOption values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringOption> UpdateScoringOptionAsync(System.Guid id, ScoringOption body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  ScoringOption
        /// </summary>
        /// <param name="id">The Id of the ScoringOption to update</param>
        /// <param name="body">The updated ScoringOption values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScoringOption> UpdateScoringOptionAsync(System.Guid id, ScoringOption body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  ScoringOption
        /// </summary>
        /// <param name="id">The id of the ScoringOption to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScoringOptionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  ScoringOption
        /// </summary>
        /// <param name="id">The id of the ScoringOption to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScoringOptionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Submissions
        /// </summary>
        /// <param name="evaluationId">Whether or not to return records only for a designated user</param>
        /// <param name="scoringModelId">Whether or not to return records only for a designated user</param>
        /// <param name="userId">Whether or not to return records only for a designated user</param>
        /// <param name="teamId">Whether or not to return records only for a designated team</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Submission>> GetSubmissionsAsync(string evaluationId, string scoringModelId, string userId, string teamId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Submissions
        /// </summary>
        /// <param name="evaluationId">Whether or not to return records only for a designated user</param>
        /// <param name="scoringModelId">Whether or not to return records only for a designated user</param>
        /// <param name="userId">Whether or not to return records only for a designated user</param>
        /// <param name="teamId">Whether or not to return records only for a designated team</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Submission>> GetSubmissionsAsync(string evaluationId, string scoringModelId, string userId, string teamId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Submission
        /// </summary>
        /// <param name="body">The data used to create the Submission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> CreateSubmissionAsync(Submission body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Submission
        /// </summary>
        /// <param name="body">The data used to create the Submission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> CreateSubmissionAsync(Submission body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Submissions by evaluation for current user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Submission>> GetMineByEvaluationAsync(System.Guid evaluationId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Submissions by evaluation for current user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Submission>> GetMineByEvaluationAsync(System.Guid evaluationId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Submission by id
        /// </summary>
        /// <param name="id">The id of the Submission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> GetSubmissionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Submission by id
        /// </summary>
        /// <param name="id">The id of the Submission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> GetSubmissionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  Submission
        /// </summary>
        /// <param name="id">The Id of the Submission to update</param>
        /// <param name="body">The updated Submission values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> UpdateSubmissionAsync(System.Guid id, Submission body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  Submission
        /// </summary>
        /// <param name="id">The Id of the Submission to update</param>
        /// <param name="body">The updated Submission values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> UpdateSubmissionAsync(System.Guid id, Submission body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  Submission
        /// </summary>
        /// <param name="id">The id of the Submission to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSubmissionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  Submission
        /// </summary>
        /// <param name="id">The id of the Submission to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSubmissionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Clears Submission Selections
        /// </summary>
        /// <param name="id">The Id of the Submission to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> ClearSubmissionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Clears Submission Selections
        /// </summary>
        /// <param name="id">The Id of the Submission to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> ClearSubmissionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Presets Submission Selections to previous move values
        /// </summary>
        /// <param name="id">The Id of the Submission to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> PresetSubmissionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Presets Submission Selections to previous move values
        /// </summary>
        /// <param name="id">The Id of the Submission to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> PresetSubmissionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fills in the details for a team average submission
        /// </summary>
        /// <param name="body">The team average Submission needing details</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> FillTeamAverageSubmissionAsync(Submission body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fills in the details for a team average submission
        /// </summary>
        /// <param name="body">The team average Submission needing details</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> FillTeamAverageSubmissionAsync(Submission body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fills in the details for a teamType average submission
        /// </summary>
        /// <param name="body">The teamType average Submission needing details</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> FillTeamTypeAverageSubmissionAsync(Submission body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fills in the details for a teamType average submission
        /// </summary>
        /// <param name="body">The teamType average Submission needing details</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> FillTeamTypeAverageSubmissionAsync(Submission body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets SubmissionCategories
        /// </summary>
        /// <param name="userId">Whether or not to return records only for a designated user</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubmissionCategory>> GetSubmissionCategoriesAsync(string userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets SubmissionCategories
        /// </summary>
        /// <param name="userId">Whether or not to return records only for a designated user</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubmissionCategory>> GetSubmissionCategoriesAsync(string userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new SubmissionCategory
        /// </summary>
        /// <param name="body">The data used to create the SubmissionCategory</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionCategory> CreateSubmissionCategoryAsync(SubmissionCategory body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new SubmissionCategory
        /// </summary>
        /// <param name="body">The data used to create the SubmissionCategory</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionCategory> CreateSubmissionCategoryAsync(SubmissionCategory body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets SubmissionCategories for the designated Submission
        /// </summary>
        /// <param name="submissionId">The ID of the Submission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubmissionCategory>> GetSubmissionCategoriesBySubmissionIdAsync(System.Guid submissionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets SubmissionCategories for the designated Submission
        /// </summary>
        /// <param name="submissionId">The ID of the Submission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubmissionCategory>> GetSubmissionCategoriesBySubmissionIdAsync(System.Guid submissionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific SubmissionCategory by id
        /// </summary>
        /// <param name="id">The id of the SubmissionCategory</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionCategory> GetSubmissionCategoryAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific SubmissionCategory by id
        /// </summary>
        /// <param name="id">The id of the SubmissionCategory</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionCategory> GetSubmissionCategoryAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  SubmissionCategory
        /// </summary>
        /// <param name="id">The Id of the SubmissionCategory to update</param>
        /// <param name="body">The updated SubmissionCategory values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionCategory> UpdateSubmissionCategoryAsync(System.Guid id, SubmissionCategory body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  SubmissionCategory
        /// </summary>
        /// <param name="id">The Id of the SubmissionCategory to update</param>
        /// <param name="body">The updated SubmissionCategory values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionCategory> UpdateSubmissionCategoryAsync(System.Guid id, SubmissionCategory body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  SubmissionCategory
        /// </summary>
        /// <param name="id">The id of the SubmissionCategory to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSubmissionCategoryAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  SubmissionCategory
        /// </summary>
        /// <param name="id">The id of the SubmissionCategory to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSubmissionCategoryAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets SubmissionComments
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubmissionComment>> GetSubmissionCommentsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets SubmissionComments
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubmissionComment>> GetSubmissionCommentsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new SubmissionComment
        /// </summary>
        /// <param name="body">The data used to create the SubmissionComment</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionComment> CreateSubmissionCommentAsync(SubmissionComment body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new SubmissionComment
        /// </summary>
        /// <param name="body">The data used to create the SubmissionComment</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionComment> CreateSubmissionCommentAsync(SubmissionComment body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets SubmissionComments for the designated SubmissionOption
        /// </summary>
        /// <param name="submissionOptionId">The ID of the SubmissionOption</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubmissionComment>> GetSubmissionCommentsBySubmissionOptionIdAsync(System.Guid submissionOptionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets SubmissionComments for the designated SubmissionOption
        /// </summary>
        /// <param name="submissionOptionId">The ID of the SubmissionOption</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubmissionComment>> GetSubmissionCommentsBySubmissionOptionIdAsync(System.Guid submissionOptionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific SubmissionComment by id
        /// </summary>
        /// <param name="id">The id of the SubmissionComment</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionComment> GetSubmissionCommentAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific SubmissionComment by id
        /// </summary>
        /// <param name="id">The id of the SubmissionComment</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionComment> GetSubmissionCommentAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  SubmissionComment
        /// </summary>
        /// <param name="id">The Id of the SubmissionComment to update</param>
        /// <param name="body">The updated SubmissionComment values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionComment> UpdateSubmissionCommentAsync(System.Guid id, SubmissionComment body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  SubmissionComment
        /// </summary>
        /// <param name="id">The Id of the SubmissionComment to update</param>
        /// <param name="body">The updated SubmissionComment values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionComment> UpdateSubmissionCommentAsync(System.Guid id, SubmissionComment body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  SubmissionComment
        /// </summary>
        /// <param name="id">The id of the SubmissionComment to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSubmissionCommentAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  SubmissionComment
        /// </summary>
        /// <param name="id">The id of the SubmissionComment to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSubmissionCommentAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets SubmissionOptions
        /// </summary>
        /// <param name="userId">Whether or not to return records only for a designated user</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubmissionOption>> GetSubmissionOptionsAsync(string userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets SubmissionOptions
        /// </summary>
        /// <param name="userId">Whether or not to return records only for a designated user</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubmissionOption>> GetSubmissionOptionsAsync(string userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new SubmissionOption
        /// </summary>
        /// <param name="body">The data used to create the SubmissionOption</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionOption> CreateSubmissionOptionAsync(SubmissionOption body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new SubmissionOption
        /// </summary>
        /// <param name="body">The data used to create the SubmissionOption</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionOption> CreateSubmissionOptionAsync(SubmissionOption body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets SubmissionOptions for the designated ScoringCategory
        /// </summary>
        /// <param name="scoringCategoryId">The ID of the ScoringCategory</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubmissionOption>> GetSubmissionOptionsByScoringCategoryIdAsync(System.Guid scoringCategoryId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets SubmissionOptions for the designated ScoringCategory
        /// </summary>
        /// <param name="scoringCategoryId">The ID of the ScoringCategory</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubmissionOption>> GetSubmissionOptionsByScoringCategoryIdAsync(System.Guid scoringCategoryId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific SubmissionOption by id
        /// </summary>
        /// <param name="id">The id of the SubmissionOption</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionOption> GetSubmissionOptionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific SubmissionOption by id
        /// </summary>
        /// <param name="id">The id of the SubmissionOption</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionOption> GetSubmissionOptionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  SubmissionOption
        /// </summary>
        /// <param name="id">The Id of the SubmissionOption to update</param>
        /// <param name="body">The updated SubmissionOption values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionOption> UpdateSubmissionOptionAsync(System.Guid id, SubmissionOption body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  SubmissionOption
        /// </summary>
        /// <param name="id">The Id of the SubmissionOption to update</param>
        /// <param name="body">The updated SubmissionOption values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmissionOption> UpdateSubmissionOptionAsync(System.Guid id, SubmissionOption body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  SubmissionOption
        /// </summary>
        /// <param name="id">The id of the SubmissionOption to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSubmissionOptionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  SubmissionOption
        /// </summary>
        /// <param name="id">The id of the SubmissionOption to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSubmissionOptionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Sets the selected state of a SubmissionOption to true
        /// </summary>
        /// <param name="id">The Id of the SubmissionOption to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> SelectSubmissionOptionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets the selected state of a SubmissionOption to true
        /// </summary>
        /// <param name="id">The Id of the SubmissionOption to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> SelectSubmissionOptionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Sets the selected state of a SubmissionOption to false
        /// </summary>
        /// <param name="id">The Id of the SubmissionOption to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> DeselectSubmissionOptionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets the selected state of a SubmissionOption to false
        /// </summary>
        /// <param name="id">The Id of the SubmissionOption to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Submission> DeselectSubmissionOptionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all Team in the system
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetTeamsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all Team in the system
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetTeamsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Team
        /// </summary>
        /// <param name="body">The data to create the Team with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> CreateTeamAsync(Team body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Team
        /// </summary>
        /// <param name="body">The data to create the Team with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> CreateTeamAsync(Team body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Teams for the current user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetMyTeamsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Teams for the current user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetMyTeamsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Teams for the specified user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetTeamsByUserAsync(System.Guid userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Teams for the specified user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetTeamsByUserAsync(System.Guid userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Teams for the specified group
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetGroupTeams2Async(System.Guid groupId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Teams for the specified group
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetGroupTeams2Async(System.Guid groupId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Teams for the specified evaluation
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetEvaluationTeams2Async(System.Guid evaluationId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Teams for the specified evaluation
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetEvaluationTeams2Async(System.Guid evaluationId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Team by id
        /// </summary>
        /// <param name="id">The id of the Team</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> GetTeamAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Team by id
        /// </summary>
        /// <param name="id">The id of the Team</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> GetTeamAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a Team
        /// </summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Team values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> UpdateTeamAsync(System.Guid id, Team body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a Team
        /// </summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Team values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> UpdateTeamAsync(System.Guid id, Team body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a Team
        /// </summary>
        /// <param name="id">The id of the Team to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTeamAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a Team
        /// </summary>
        /// <param name="id">The id of the Team to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTeamAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets TeamTypes
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamType>> GetTeamTypesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets TeamTypes
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamType>> GetTeamTypesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new TeamType
        /// </summary>
        /// <param name="body">The data used to create the TeamType</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamType> CreateTeamTypeAsync(TeamType body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new TeamType
        /// </summary>
        /// <param name="body">The data used to create the TeamType</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamType> CreateTeamTypeAsync(TeamType body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific TeamType by id
        /// </summary>
        /// <param name="id">The id of the TeamType</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamType> GetTeamTypeAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific TeamType by id
        /// </summary>
        /// <param name="id">The id of the TeamType</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamType> GetTeamTypeAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  TeamType
        /// </summary>
        /// <param name="id">The Id of the TeamType to update</param>
        /// <param name="body">The updated TeamType values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamType> UpdateTeamTypeAsync(System.Guid id, TeamType body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  TeamType
        /// </summary>
        /// <param name="id">The Id of the TeamType to update</param>
        /// <param name="body">The updated TeamType values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamType> UpdateTeamTypeAsync(System.Guid id, TeamType body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  TeamType
        /// </summary>
        /// <param name="id">The id of the TeamType to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTeamTypeAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  TeamType
        /// </summary>
        /// <param name="id">The id of the TeamType to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTeamTypeAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all TeamUsers in the system
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamUser>> GetTeamUsersAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all TeamUsers in the system
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamUser>> GetTeamUsersAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new TeamUser
        /// </summary>
        /// <param name="body">The data to create the TeamUser with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamUser> CreateTeamUserAsync(TeamUser body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new TeamUser
        /// </summary>
        /// <param name="body">The data to create the TeamUser with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamUser> CreateTeamUserAsync(TeamUser body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific TeamUser by id
        /// </summary>
        /// <param name="id">The id of the TeamUser</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamUser> GetTeamUserAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific TeamUser by id
        /// </summary>
        /// <param name="id">The id of the TeamUser</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamUser> GetTeamUserAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a TeamUser
        /// </summary>
        /// <param name="id">The id of the TeamUser to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTeamUserAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a TeamUser
        /// </summary>
        /// <param name="id">The id of the TeamUser to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTeamUserAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a TeamUser by user ID and team ID
        /// </summary>
        /// <param name="teamId">ID of a team.</param>
        /// <param name="userId">ID of a user.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTeamUserByIdsAsync(System.Guid teamId, System.Guid userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a TeamUser by user ID and team ID
        /// </summary>
        /// <param name="teamId">ID of a team.</param>
        /// <param name="userId">ID of a user.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTeamUserByIdsAsync(System.Guid teamId, System.Guid userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all Users in the system
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetUsersAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all Users in the system
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetUsersAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new User
        /// </summary>
        /// <param name="body">The data to create the User with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> CreateUserAsync(User body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new User
        /// </summary>
        /// <param name="body">The data to create the User with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> CreateUserAsync(User body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific User by id
        /// </summary>
        /// <param name="id">The id of the User</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> GetUserAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific User by id
        /// </summary>
        /// <param name="id">The id of the User</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> GetUserAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  User
        /// </summary>
        /// <param name="id">The Id of the User to update</param>
        /// <param name="body">The updated User values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> UpdateUserAsync(System.Guid id, User body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  User
        /// </summary>
        /// <param name="id">The Id of the User to update</param>
        /// <param name="body">The updated User values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> UpdateUserAsync(System.Guid id, User body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a User
        /// </summary>
        /// <param name="id">The id of the User to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a User
        /// </summary>
        /// <param name="id">The id of the User to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all Users for a team
        /// </summary>
        /// <param name="teamId">The id of the Team</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetTeamUsers2Async(System.Guid teamId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all Users for a team
        /// </summary>
        /// <param name="teamId">The id of the Team</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetTeamUsers2Async(System.Guid teamId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all UserPermissions in the system
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserPermission>> GetUserPermissionsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all UserPermissions in the system
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserPermission>> GetUserPermissionsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new UserPermission
        /// </summary>
        /// <param name="body">The data to create the UserPermission with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserPermission> CreateUserPermissionAsync(UserPermission body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new UserPermission
        /// </summary>
        /// <param name="body">The data to create the UserPermission with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserPermission> CreateUserPermissionAsync(UserPermission body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific UserPermission by id
        /// </summary>
        /// <param name="id">The id of the UserPermission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserPermission> GetUserPermissionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific UserPermission by id
        /// </summary>
        /// <param name="id">The id of the UserPermission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserPermission> GetUserPermissionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a UserPermission
        /// </summary>
        /// <param name="id">The id of the UserPermission to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserPermissionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a UserPermission
        /// </summary>
        /// <param name="id">The id of the UserPermission to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserPermissionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a UserPermission by user ID and permission ID
        /// </summary>
        /// <param name="userId">ID of a user.</param>
        /// <param name="permissionId">ID of a permission.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserPermissionByIdsAsync(System.Guid userId, System.Guid permissionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a UserPermission by user ID and permission ID
        /// </summary>
        /// <param name="userId">ID of a user.</param>
        /// <param name="permissionId">ID of a permission.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserPermissionByIdsAsync(System.Guid userId, System.Guid permissionId, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Action
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("evaluationId")]
        public System.Guid EvaluationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("evaluation")]
        public Evaluation Evaluation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teamId")]
        public System.Guid TeamId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("team")]
        public Team Team { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("moveNumber")]
        public int MoveNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("injectNumber")]
        public int InjectNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("actionNumber")]
        public int ActionNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isChecked")]
        public bool IsChecked { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("changedBy")]
        public System.Guid? ChangedBy { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Evaluation
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ItemStatus Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currentMoveNumber")]
        public int CurrentMoveNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("situationTime")]
        public System.DateTimeOffset SituationTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("situationDescription")]
        public string SituationDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scoringModelId")]
        public System.Guid ScoringModelId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scoringModel")]
        public ScoringModel ScoringModel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("galleryExhibitId")]
        public System.Guid? GalleryExhibitId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teams")]
        public System.Collections.Generic.ICollection<Team> Teams { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("moves")]
        public System.Collections.Generic.ICollection<Move> Moves { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("submissions")]
        public System.Collections.Generic.ICollection<Submission> Submissions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EvaluationSituation
    {

        [System.Text.Json.Serialization.JsonPropertyName("situationTime")]
        public System.DateTimeOffset SituationTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("situationDescription")]
        public string SituationDescription { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EvaluationTeam
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teamId")]
        public System.Guid TeamId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("team")]
        public Team Team { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("evaluationId")]
        public System.Guid EvaluationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("evaluation")]
        public Evaluation Evaluation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Group
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teams")]
        public System.Collections.Generic.ICollection<Team> Teams { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GroupTeam
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("groupId")]
        public System.Guid GroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("group")]
        public Group Group { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teamId")]
        public System.Guid TeamId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("team")]
        public Team Team { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ItemStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Complete")]
        Complete = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Archived")]
        Archived = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Move
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("moveNumber")]
        public int MoveNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("situationTime")]
        public System.DateTimeOffset SituationTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("situationDescription")]
        public string SituationDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("evaluationId")]
        public System.Guid EvaluationId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Permission
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Key { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("readOnly")]
        public bool ReadOnly { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public int? Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        public string Detail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("instance")]
        public string Instance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Role
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("evaluationId")]
        public System.Guid EvaluationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("evaluation")]
        public Evaluation Evaluation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teamId")]
        public System.Guid TeamId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("team")]
        public Team Team { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<User> Users { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScoringCategory
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayOrder")]
        public int DisplayOrder { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("allowMultipleChoices")]
        public bool AllowMultipleChoices { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("calculationEquation")]
        public string CalculationEquation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isModifierRequired")]
        public bool IsModifierRequired { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scoringWeight")]
        public double ScoringWeight { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scoringModelId")]
        public System.Guid ScoringModelId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scoringOptions")]
        public System.Collections.Generic.ICollection<ScoringOption> ScoringOptions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScoringModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("calculationEquation")]
        public string CalculationEquation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ItemStatus Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scoringCategories")]
        public System.Collections.Generic.ICollection<ScoringCategory> ScoringCategories { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScoringOption
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayOrder")]
        public int DisplayOrder { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isModifier")]
        public bool IsModifier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public double Value { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scoringCategoryId")]
        public System.Guid ScoringCategoryId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Submission
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("score")]
        public double Score { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ItemStatus Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scoringModelId")]
        public System.Guid ScoringModelId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public System.Guid? UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("evaluationId")]
        public System.Guid EvaluationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teamId")]
        public System.Guid? TeamId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("groupId")]
        public System.Guid? GroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("moveNumber")]
        public int MoveNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scoreIsAnAverage")]
        public bool ScoreIsAnAverage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("submissionCategories")]
        public System.Collections.Generic.ICollection<SubmissionCategory> SubmissionCategories { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubmissionCategory
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("score")]
        public double Score { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("submissionId")]
        public System.Guid SubmissionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scoringCategoryId")]
        public System.Guid ScoringCategoryId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("submissionOptions")]
        public System.Collections.Generic.ICollection<SubmissionOption> SubmissionOptions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubmissionComment
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public string Comment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("submissionOptionId")]
        public System.Guid SubmissionOptionId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubmissionOption
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSelected")]
        public bool IsSelected { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("selectedCount")]
        public int SelectedCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("submissionCategoryId")]
        public System.Guid SubmissionCategoryId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scoringOptionId")]
        public System.Guid ScoringOptionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("submissionComments")]
        public System.Collections.Generic.ICollection<SubmissionComment> SubmissionComments { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Team
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("shortName")]
        public string ShortName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teamTypeId")]
        public System.Guid TeamTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teamType")]
        public TeamType TeamType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<User> Users { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("submissions")]
        public System.Collections.Generic.ICollection<Submission> Submissions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamType
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamUser
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public System.Guid UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("user")]
        public User User { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teamId")]
        public System.Guid TeamId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("team")]
        public Team Team { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnreadArticles
    {

        [System.Text.Json.Serialization.JsonPropertyName("exhibitId")]
        public System.Guid ExhibitId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public System.Guid UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public string Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]
        public System.Collections.Generic.ICollection<Permission> Permissions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("submissions")]
        public System.Collections.Generic.ICollection<Submission> Submissions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserPermission
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public System.Guid UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionId")]
        public System.Guid PermissionId { get; set; }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603