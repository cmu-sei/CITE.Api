/*
 Copyright 2024 Carnegie Mellon University. All Rights Reserved.
 Released under a MIT (SEI)-style license. See LICENSE.md in the project root for license information.
*/

// <auto-generated />
using System;
using Cite.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cite.Api.Migrations.PostgreSQL.Migrations
{
    [DbContext(typeof(CiteContext))]
    [Migration("20240131155313_categories-by-move")]
    partial class Categoriesbymove
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cite.Api.Data.Models.ActionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("ActionNumber")
                        .HasColumnType("integer")
                        .HasColumnName("action_number");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("changed_by");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("EvaluationId")
                        .HasColumnType("uuid")
                        .HasColumnName("evaluation_id");

                    b.Property<int>("InjectNumber")
                        .HasColumnType("integer")
                        .HasColumnName("inject_number");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_checked");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("MoveNumber")
                        .HasColumnType("integer")
                        .HasColumnName("move_number");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("TeamId");

                    b.ToTable("actions");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.EvaluationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<int>("CurrentMoveNumber")
                        .HasColumnType("integer")
                        .HasColumnName("current_move_number");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("DisplayCommentTextBoxes")
                        .HasColumnType("boolean")
                        .HasColumnName("display_comment_text_boxes");

                    b.Property<bool>("DisplayScoringModelByMoveNumber")
                        .HasColumnType("boolean")
                        .HasColumnName("display_scoring_model_by_move_number");

                    b.Property<Guid?>("GalleryExhibitId")
                        .HasColumnType("uuid")
                        .HasColumnName("gallery_exhibit_id");

                    b.Property<bool>("HideScoresOnScoreSheet")
                        .HasColumnType("boolean")
                        .HasColumnName("hide_scores_on_score_sheet");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("RightSideDisplay")
                        .HasColumnType("integer")
                        .HasColumnName("right_side_display");

                    b.Property<string>("RightSideEmbeddedUrl")
                        .HasColumnType("text")
                        .HasColumnName("right_side_embedded_url");

                    b.Property<string>("RightSideHtmlBlock")
                        .HasColumnType("text")
                        .HasColumnName("right_side_html_block");

                    b.Property<Guid>("ScoringModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("scoring_model_id");

                    b.Property<bool>("ShowPastSituationDescriptions")
                        .HasColumnType("boolean")
                        .HasColumnName("show_past_situation_descriptions");

                    b.Property<string>("SituationDescription")
                        .HasColumnType("text")
                        .HasColumnName("situation_description");

                    b.Property<DateTime>("SituationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("situation_time");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ScoringModelId");

                    b.ToTable("evaluations");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.EvaluationTeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid>("EvaluationId")
                        .HasColumnType("uuid")
                        .HasColumnName("evaluation_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("EvaluationId", "TeamId")
                        .IsUnique();

                    b.ToTable("evaluation_teams");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.MoveEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("EvaluationId")
                        .HasColumnType("uuid")
                        .HasColumnName("evaluation_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("MoveNumber")
                        .HasColumnType("integer")
                        .HasColumnName("move_number");

                    b.Property<string>("SituationDescription")
                        .HasColumnType("text")
                        .HasColumnName("situation_description");

                    b.Property<DateTime>("SituationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("situation_time");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId", "MoveNumber")
                        .IsUnique();

                    b.ToTable("moves");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.PermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("read_only");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Key", "Value")
                        .IsUnique();

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid>("EvaluationId")
                        .HasColumnType("uuid")
                        .HasColumnName("evaluation_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("TeamId");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.RoleUserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("role_users");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.ScoringCategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("AllowMultipleChoices")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_multiple_choices");

                    b.Property<string>("CalculationEquation")
                        .HasColumnType("text")
                        .HasColumnName("calculation_equation");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<bool>("IsModifierRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_modifier_required");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("MoveNumberFirstDisplay")
                        .HasColumnType("integer")
                        .HasColumnName("move_number_first_display");

                    b.Property<int>("MoveNumberLastDisplay")
                        .HasColumnType("integer")
                        .HasColumnName("move_number_last_display");

                    b.Property<Guid>("ScoringModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("scoring_model_id");

                    b.Property<double>("ScoringWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("scoring_weight");

                    b.HasKey("Id");

                    b.HasIndex("ScoringModelId");

                    b.ToTable("scoring_categories");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.ScoringModelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("CalculationEquation")
                        .HasColumnType("text")
                        .HasColumnName("calculation_equation");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("scoring_models");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.ScoringOptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<bool>("IsModifier")
                        .HasColumnType("boolean")
                        .HasColumnName("is_modifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("ScoringCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("scoring_category_id");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("ScoringCategoryId");

                    b.ToTable("scoring_options");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.SubmissionCategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<double>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.Property<Guid>("ScoringCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("scoring_category_id");

                    b.Property<Guid>("SubmissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("submission_id");

                    b.HasKey("Id");

                    b.HasIndex("ScoringCategoryId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("submission_categories");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.SubmissionCommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("SubmissionOptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("submission_option_id");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionOptionId");

                    b.ToTable("submission_comments");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.SubmissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid?>("EvaluationId")
                        .HasColumnType("uuid")
                        .HasColumnName("evaluation_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("MoveNumber")
                        .HasColumnType("integer")
                        .HasColumnName("move_number");

                    b.Property<double>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.Property<Guid>("ScoringModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("scoring_model_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ScoringModelId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.HasIndex("EvaluationId", "UserId", "TeamId", "MoveNumber")
                        .IsUnique();

                    b.ToTable("submissions");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.SubmissionOptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean")
                        .HasColumnName("is_selected");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("ScoringOptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("scoring_option_id");

                    b.Property<Guid>("SubmissionCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("submission_category_id");

                    b.HasKey("Id");

                    b.HasIndex("ScoringOptionId");

                    b.HasIndex("SubmissionCategoryId");

                    b.ToTable("submission_options");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid?>("EvaluationId")
                        .HasColumnType("uuid")
                        .HasColumnName("evaluation_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<Guid>("TeamTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_type_id");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("TeamTypeId");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.TeamTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<bool>("IsOfficialScoreContributor")
                        .HasColumnType("boolean")
                        .HasColumnName("is_official_score_contributor");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("ShowTeamTypeAverage")
                        .HasColumnType("boolean")
                        .HasColumnName("show_team_type_average");

                    b.HasKey("Id");

                    b.ToTable("team_types");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.TeamUserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("IsObserver")
                        .HasColumnType("boolean")
                        .HasColumnName("is_observer");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId", "TeamId")
                        .IsUnique();

                    b.ToTable("team_users");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.UserPermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId", "PermissionId")
                        .IsUnique();

                    b.ToTable("user_permissions");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.ActionEntity", b =>
                {
                    b.HasOne("Cite.Api.Data.Models.EvaluationEntity", "Evaluation")
                        .WithMany()
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cite.Api.Data.Models.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.EvaluationEntity", b =>
                {
                    b.HasOne("Cite.Api.Data.Models.ScoringModelEntity", "ScoringModel")
                        .WithMany()
                        .HasForeignKey("ScoringModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoringModel");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.EvaluationTeamEntity", b =>
                {
                    b.HasOne("Cite.Api.Data.Models.EvaluationEntity", "Evaluation")
                        .WithMany()
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cite.Api.Data.Models.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.MoveEntity", b =>
                {
                    b.HasOne("Cite.Api.Data.Models.EvaluationEntity", "Evaluation")
                        .WithMany("Moves")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.RoleEntity", b =>
                {
                    b.HasOne("Cite.Api.Data.Models.EvaluationEntity", "Evaluation")
                        .WithMany()
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cite.Api.Data.Models.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.RoleUserEntity", b =>
                {
                    b.HasOne("Cite.Api.Data.Models.RoleEntity", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cite.Api.Data.Models.UserEntity", "User")
                        .WithMany("RoleUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.ScoringCategoryEntity", b =>
                {
                    b.HasOne("Cite.Api.Data.Models.ScoringModelEntity", "ScoringModel")
                        .WithMany("ScoringCategories")
                        .HasForeignKey("ScoringModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoringModel");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.ScoringOptionEntity", b =>
                {
                    b.HasOne("Cite.Api.Data.Models.ScoringCategoryEntity", "ScoringCategory")
                        .WithMany("ScoringOptions")
                        .HasForeignKey("ScoringCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoringCategory");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.SubmissionCategoryEntity", b =>
                {
                    b.HasOne("Cite.Api.Data.Models.ScoringCategoryEntity", "ScoringCategory")
                        .WithMany()
                        .HasForeignKey("ScoringCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cite.Api.Data.Models.SubmissionEntity", "Submission")
                        .WithMany("SubmissionCategories")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoringCategory");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.SubmissionCommentEntity", b =>
                {
                    b.HasOne("Cite.Api.Data.Models.SubmissionOptionEntity", "SubmissionOption")
                        .WithMany("SubmissionComments")
                        .HasForeignKey("SubmissionOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubmissionOption");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.SubmissionEntity", b =>
                {
                    b.HasOne("Cite.Api.Data.Models.EvaluationEntity", "Evaluation")
                        .WithMany("Submissions")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cite.Api.Data.Models.ScoringModelEntity", "ScoringModel")
                        .WithMany()
                        .HasForeignKey("ScoringModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cite.Api.Data.Models.TeamEntity", "Team")
                        .WithMany("Submissions")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cite.Api.Data.Models.UserEntity", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Evaluation");

                    b.Navigation("ScoringModel");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.SubmissionOptionEntity", b =>
                {
                    b.HasOne("Cite.Api.Data.Models.ScoringOptionEntity", "ScoringOption")
                        .WithMany()
                        .HasForeignKey("ScoringOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cite.Api.Data.Models.SubmissionCategoryEntity", "SubmissionCategory")
                        .WithMany("SubmissionOptions")
                        .HasForeignKey("SubmissionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoringOption");

                    b.Navigation("SubmissionCategory");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.TeamEntity", b =>
                {
                    b.HasOne("Cite.Api.Data.Models.EvaluationEntity", "Evaluation")
                        .WithMany("Teams")
                        .HasForeignKey("EvaluationId");

                    b.HasOne("Cite.Api.Data.Models.TeamTypeEntity", "TeamType")
                        .WithMany()
                        .HasForeignKey("TeamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");

                    b.Navigation("TeamType");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.TeamUserEntity", b =>
                {
                    b.HasOne("Cite.Api.Data.Models.TeamEntity", "Team")
                        .WithMany("TeamUsers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cite.Api.Data.Models.UserEntity", "User")
                        .WithMany("TeamUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.UserPermissionEntity", b =>
                {
                    b.HasOne("Cite.Api.Data.Models.PermissionEntity", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cite.Api.Data.Models.UserEntity", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.EvaluationEntity", b =>
                {
                    b.Navigation("Moves");

                    b.Navigation("Submissions");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.PermissionEntity", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.RoleEntity", b =>
                {
                    b.Navigation("RoleUsers");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.ScoringCategoryEntity", b =>
                {
                    b.Navigation("ScoringOptions");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.ScoringModelEntity", b =>
                {
                    b.Navigation("ScoringCategories");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.SubmissionCategoryEntity", b =>
                {
                    b.Navigation("SubmissionOptions");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.SubmissionEntity", b =>
                {
                    b.Navigation("SubmissionCategories");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.SubmissionOptionEntity", b =>
                {
                    b.Navigation("SubmissionComments");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.TeamEntity", b =>
                {
                    b.Navigation("Submissions");

                    b.Navigation("TeamUsers");
                });

            modelBuilder.Entity("Cite.Api.Data.Models.UserEntity", b =>
                {
                    b.Navigation("RoleUsers");

                    b.Navigation("Submissions");

                    b.Navigation("TeamUsers");

                    b.Navigation("UserPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
